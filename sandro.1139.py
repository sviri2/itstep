
# print("hallo, world")

## int: integer - მთელი რიცხვი
## x & y - ცვლადები  # 6 & 2 - მონაცემები
# x = 6
# y = 2
########################################

# level = x*y+x-y 
########################################
## მიმატება
# print(x + y)

## გამოკლება
# print(x - y)

## გაყოფა
# print(x / y)  =>   # float - არამთელი რიცხვი

## გამრავლება
# print(x*y)

## ხარისხი
# print(x**y)

## შედარება
# print(x==y)

###############################################
## str: string - ტექსტი, იწერება ყოველთვის ბრჭყალებში
## ჩაშენებული ფუნქცია upper and lower - დიდი და პატარა ასოები...

#####################
# level = x*y+x-y 
# name = "Nika"
## გამარჯობა [სახელი], შენი ლეველია: [ლეველი]
# print("hallo", name.upper(), ",", "your level is:," level)


###################################################################

## Bool - ბული

# True
# False
# z = 8
# print(x==z)
#################################################

## MONACEMTA STRUKTUREBI

## 1) List - სია
## 2) Set - სიმრავლე
## 3) Tuple - ტუპლი
## 4) dictionary - ლექსიკონი



############################################


## List = [] - სია

## Allows diferent data types - შესაძლებელია სხვადასხვა მონაცემის ერთ ლისტში შენახვა
## len() - length: ზომა/სიგრძე    #print(len(mylist))
## Changeable - ცვალებადი    # mylist[index] = ***     # print(mylist)
## Allows duolicates - შესაძლებელია დუპლიკატების ქონა
## ლისტში ბოლო ელემენტი არის ლისტის სიგრძეს მინუს ერთ პოზიციაზე ანუ ინდექსზე.
## append() - ამატებს ახალ ელემენტს ბოლო ინდექსზე mylist.append(***)
## pop() - შეგვიძლია წავშალოთ ელემენტი ლისტიდან ინდექსის საშუალებით
## remove() - შეგვიძლია წავშალოთ ელემენტი ლისტიდან მისი დასახელებით
## insert() - ამატებს ახალ ელემენტს სიაში ჩვენს მითითებულ ინდექსზე    mylist.insert(ინდექსი ,  და ახალი ელემენტის დასახელება )
## clear() - ლისტის გასუფთავება mylist.clear()
## del - სიის წაშლა    del mylist
## sort - ლისტი ლაგდება ანბანის ან რიცხვების შესაბამისად

##################################################################################



# mylist = [1, 2, "Dato", "Ana", True, False, 3.0, "saqartvelo", 10, "mariami"]

# myData = mylist[3]     # მონაცემის(ელემენტის) გამოტანა ინდექსის საშუალებით
# print(myData)

# mylist[1] = "sandro"     # მონაცემის შეცვლა კონკრეტულ ინდექსზე 
# print(mylist)

# n = len(mylist)
# print(mylist[len(mylist)-1])    # ლისტის ბოლო ელემენტის გამოტანა
# print(mylist[n-1])              # ლისტის ბოლო ელემენტის გამოტანა
# print(mylist[-1])               # ლისტის ბოლო ელემენტის გამოტანა 

# print(mylist[6])   # ელემენტის(მონაცემის) გამოტანა ინდექსის საშუალებით

# mylist.append("Tbilisi")   # ელემენტის დამატება
# print(mylist)

# print(len(mylist))

# mylist[2] = "name"    # ელემენტის შეცვლა სხვა ელემენტით ინდექსის საშუალებით
# print(mylist)         # ელემენტი შეიცვლება იმ ინდექსზე რომელზეც ის იდგა

# mylist.remove(1)      # ელემენტის წაშლა დასახელებით
# print(mylist) 




###################################################################


## Set = {} - სიმრავლე

## allows different data types - შესაძლებელია სხვადასხვა ტიპის მონაცემის ერთ სიმრავლეში შენახვა
## Unordered - დაულაგებელი: ელემენტებს არ გააჩნით ფიქსირებული ინდექსი
## does not allow duplicates - არ უშვებს დუპლიკატებს
## u nchangeable - უცვლელი: შეუძლებელია არსებული ელემენტის ახალი ელემენტით ჩანაცვლება
## add() - ელემენტის დამატება სიმრავლეში    # myset.add()
## remove() - ელემენტის წაშლა სიმრავლიდან  # myset.remove()
## union() - ორი სიმრავლის გაერთიანება და შედეგის ახალ სიმრავლეში შენახვა
## update() - არსებულ სიმრავლეზე ახალი სიმრავლის დამატება




############################################################################

## TUPLE - ტუპლი

## allows different data types & duplicates - შესაძლებელია სხვადასხვა ტიპის მონაცემის ერთ ტუპლში შენახვა, ასევე დაშვებულია დუპლიკატები
## ordered and unchangeable - დალაგებული და უცვლელი: ტუპლის ელემენტის ჩანაცვლება ან წაშლა შეუძლებელია.

##############
# mytuple = (1, 2, 3, 4, "sandro", "mariami", 2, 1)
# sandro = (34, 45, 67, 78, "niangi")

## newtuple = mytuple + sandro - ორი ტუპლის გაერთიანება ახალ ტუპლში
## print(newtuple)

## print(mytuple.index("sandro")) - ინდექსის გაგება მონაცემის საშუალებით

##############################################################################################


## DICTIONARY - ლექსიკონი


## ordered, changeable, does not allow duplicates - დალაგებულია ასევე ცვალებადი და დაუშვებელი დუპლიკატის ქონა

## kay: value


## car = {"brand": "BMW", 
##       "model": "F10",
##       "year": 2020}

## print(car.keys()) - ყველა ქის გაგება. იგივეა values პრინციპი

## car["color"] = ["red", "black", "white"] - ჩამატება
## car.pop("year") - ქის ამოღება
## car["year"] = 2022 - შეცვლა



##################################################################################

### Conditionals ### - პირობითები

## If, else, elif

# n = 0
# if n>0:
#     print("დადებითია")
# elif n<0:
#     print("უარყოფითია")
# else:
#     print("ეს რიცხვი არის 0") 


#######################################################################################

## LOOPS ## - ლუპები


 
## while loop 

# n = 100                                      ასევე შეგვიძლია ჩვენი მიღებული output-ის list-ში შეტანა.     n = 100                                                      
# i = 0                                                                                                    i = 0                                                 
# while i < 100:                                                                                           mylist = []    # ლისტის ინიციალიზაცია - init
    # print(i)                                                                                             while i < n:
#      # i = i + 1                                                                                            mylist.append(i)
                                                                                      #                       i = i + 1
                                                                                                        
#                                                                                                          print(mylist)
## for loop 


# n = 100
# mylist = [] 
# numbers_even = []    # initialisation, init - ინიციალიზაცია
# for i in range(100):
    # mylist.append(i**2)
    # if i % 2 == 0:
        # numbers_even.append(i**2) # ამით დავამატეთ ყველა რიცხვის კვადრატი ჩვენს ლისტში
# print(mylist)
# print(numbers_even)
# print(len(mylist))
# print(len(numbers_even))

####################################################################

## function - ფუნქცია
 
# სხვა დროს იყოს :d :d 




    




